<?php

/**
 * Created by PhpStorm.
 * User: nhan
 * Date: 2/20/17
 * Time: 11:10 PM
 */
/**
 * @return array
 * Implement hook_menu()
 */
module_load_include('inc','idea_custom','pages');
function idea_custom_menu()
{
    $items = array();

    $items['admin/dashboard'] = array(
        'title' => 'Admin Dashboard ',
        'description' => 'Control config for artline.',
        'page callback' => 'idea_admin_dashboard',
        'access arguments' => array('administer idea'),
        'file' => 'idea_custom.pages.inc',
    );
    $items['frontpage/pager'] = array(
        'page callback' => 'idea_custom_article_more',
        'access callback' => TRUE,
        'file' => 'idea_custom.pages.inc',
    );
    $items['cate/pager'] = array(
        'page callback' => 'idea_custom_article_cate_more',
        'access callback' => TRUE,
    );
    $items['frontpage'] = array(
        'title' => 'Kho ý tưởng',
        'page callback' => 'idea_custom_frontpage',
        'access callback' => TRUE,
        'type' => MENU_LOCAL_ACTION,
        'file' => 'idea_custom.pages.inc',
    );

    $items['idea/comment/post'] = array(
        'page callback' => 'idea_custom_comment',
        'access callback' => TRUE,
        'type' => MENU_LOCAL_ACTION,
        'file' => 'idea_custom.pages.inc',
    );
    $items['idea/comment/get'] = array(
        'page callback' => 'idea_custom_comment_get',
        'access callback' => TRUE,
        'type' => MENU_LOCAL_ACTION,
        'file' => 'idea_custom.pages.inc',
    );

    $items['idea/like/post'] = array(
        'page callback' => 'idea_custom_like_post_action',
        'access callback' => TRUE,
        'type' => MENU_LOCAL_ACTION,
        'file' => 'idea_custom.pages.inc',
    );

    $items['idea/save/post'] = array(
        'page callback' => 'idea_custom_save_post_action',
        'access callback' => TRUE,
        'type' => MENU_LOCAL_ACTION,
        'file' => 'idea_custom.pages.inc',
    );

    $items['idea/login'] = array(
        'page callback' => 'idea_custom_login',
        'access callback' => TRUE,
        'type' => MENU_LOCAL_ACTION,
        'file' => 'idea_custom.pages.inc',
    );

    $items['idea/share/post/%node'] = array(
        'page callback' => 'idea_custom_share_post_action',
        'page arguments' => array(3),
        'access callback' => TRUE,
        'type' => MENU_LOCAL_ACTION,
        'file' => 'idea_custom.pages.inc',
    );

    $items['idea/post/idea'] = array(
        'page callback' => 'idea_custom_post_idea',
        'access callback' => TRUE,
        'type' => MENU_LOCAL_ACTION,
        'file' => 'idea_custom.pages.inc',
    );
    $items['idea/search'] = array(
        'page callback' => 'idea_custom_search',
        'access callback' => TRUE,
        'type' => MENU_LOCAL_ACTION,
        'file' => 'idea_custom.pages.inc',
    );
    $items['idea/user/post'] = array(
        'page callback' => 'idea_custom_user_post',
        'access callback' => TRUE,
        'type' => MENU_LOCAL_ACTION,
        'file' => 'idea_custom.pages.inc',
    );
    $items['idea/user/save'] = array(
        'page callback' => 'idea_custom_user_save',
        'access callback' => TRUE,
        'type' => MENU_LOCAL_ACTION,
        'file' => 'idea_custom.pages.inc',
    );
    $items['idea/user/exchange'] = array(
        'page callback' => 'idea_custom_user_exchange',
        'access callback' => TRUE,
        'type' => MENU_LOCAL_ACTION,
        'file' => 'idea_custom.pages.inc',
    );
    $items['admin/config/content/idea'] = array(
        'title' => 'Kho Y Tuong Settings ',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('idea_admin'),
        'access arguments' => array('administer idea'),
        'file' => 'idea.admin.inc',
    );
    $items['admin/config/content/color'] = array(
        'title' => 'Kho Y Tuong Color settings ',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('idea_admin_color'),
        'access arguments' => array('administer idea'),
        'file' => 'idea.admin.inc',
    );

    return $items;
}

/**
 * Implements hook_permission().
 */
function idea_custom_permission()
{
    return array(
        'administer idea' => array(
            'title' => t('Administer Idea'),
            'restrict access' => TRUE,
        ),
    );
}

/**
 * Implementation of hook_theme().
 */
function idea_custom_theme()
{
    $items = array();

    $items['idea_account_info'] = array(
        'render element' => 'element',
        'path' => drupal_get_path('module', 'idea_custom') . '/theme',
        'template' => 'idea-account-info',
    );

    $items['idea_post_form'] = array(
        'render element' => 'element',
        'path' => drupal_get_path('module', 'idea_custom') . '/theme',
        'template' => 'idea-post-form',
    );

    $items['idea_user_link'] = array(
        'render element' => 'element',
        'path' => drupal_get_path('module', 'idea_custom') . '/theme',
        'template' => 'idea-user-link',
    );

    $items['idea_post_detail'] = array(
        'render element' => 'element',
        'path' => drupal_get_path('module', 'idea_custom') . '/theme',
        'template' => 'idea-post-detail',
    );

    $items['idea_frontpage'] = array(
        'render element' => 'element',
        'path' => drupal_get_path('module', 'idea_custom') . '/theme',
        'template' => 'idea-frontpage',
    );
    $items['idea_frontpage_top'] = array(
        'render element' => 'element',
        'path' => drupal_get_path('module', 'idea_custom') . '/theme',
        'template' => 'idea-frontpage-top',
    );
    $items['idea_frontpage_pager'] = array(
        'render element' => 'element',
        'path' => drupal_get_path('module', 'idea_custom') . '/theme',
        'template' => 'idea-frontpage-pager',
    );
    $items['idea_post_relate'] = array(
        'render element' => 'element',
        'path' => drupal_get_path('module', 'idea_custom') . '/theme',
        'template' => 'idea-post-relate',
    );

    $items['idea_comment'] = array(
        'render element' => 'element',
        'path' => drupal_get_path('module', 'idea_custom') . '/theme',
        'template' => 'idea-comment',
    );

    $items['idea_comment_form'] = array(
        'render element' => 'element',
        'path' => drupal_get_path('module', 'idea_custom') . '/theme',
        'template' => 'idea-comment-form',
    );

    $items['idea_comment_ajax'] = array(
        'render element' => 'element',
        'path' => drupal_get_path('module', 'idea_custom') . '/theme',
        'template' => 'idea-comment-ajax',
    );

    $items['idea_share_post'] = array(
        'render element' => 'element',
        'path' => drupal_get_path('module', 'idea_custom') . '/theme',
        'template' => 'idea-share-button',
    );
    $items['idea_search'] = array(
        'render element' => 'element',
        'path' => drupal_get_path('module', 'idea_custom') . '/theme',
        'template' => 'idea-search',
    );
     $items['idea_admin_dashboard'] = array(
        'render element' => 'element',
        'path' => drupal_get_path('module', 'idea_custom') . '/theme',
        'template' => 'idea-admin-dashboard',
    );

    return $items;
}

/**
 * Implements hook_block_info().
 */
function idea_custom_block_info()
{
    $blocks = array();
    $blocks['idea_search_icon'] = array(
        'info' => t('Idea Search Icon'),
    );
    $blocks['account_info'] = array(
        'info' => t('Idea Account Info'),
    );
    $blocks['post_form'] = array(
        'info' => t('Idea Post form'),
    );
    $blocks['user_link'] = array(
        'info' => t('User Link'),
    );
    $blocks['post_detail'] = array(
        'info' => t('Post detail'),
    );
    $blocks['idea_loading'] = array(
        'info' => t('Idea loading'),
    );
    $blocks['idea_post_relate'] = array(
        'info' => t('Idea Post Relate'),
    );
    $blocks['idea_post_front_top'] = array(
        'info' => t('Idea Post top'),
    );
    $blocks['idea_register_user'] = array(
        'info' => t('User Register'),
    );
    $blocks['idea_custom_button'] = array(
        'info' => t('Bottom Button'),
    );
    $blocks['idea_category_block'] = array(
        'info' => t('Category block'),
    );
    $blocks['idea_category_block_item'] = array(
        'info' => t('Category block item'),
    );
    $blocks['idea_search'] = array(
        'info' => t('Idea search'),
    );

    return $blocks;
}

/**
 * Implements hook_block_view().
 */
function idea_custom_block_view($delta = '')
{
    $block = array();
    global $user;
    switch ($delta) {
        case 'idea_search_icon' :
            $block['content'] = '<div class="idea-search-icon"><a href="/search/google">search</a></div>';
            break;

        case 'account_info' :
            $profile = false;
            if ($user->uid > 0) {
                $account = user_load($user->uid);
                if ($account->status > 0) {
                    $profile = theme('idea_account_info', array('account' => $account));
                }
            }

            $block['content'] = $profile;
            break;
        case 'user_link' :
            $account = user_load($user->uid);
            $block['content'] = theme('idea_user_link', array('account' => $account));
            break;
        case 'post_form' :
            $block['content'] = theme('idea_post_form');
            break;
        case 'idea_search' :
            $block['content'] = theme('idea_search');
            break;
        case 'post_detail' :
            $block['content'] = theme('idea_post_detail');
            break;
        case 'idea_loading' :
            $block['content'] = '<div class="idea-loading"><img src="' . base_path() . path_to_theme('idea') . '/images/ajax-loader.gif"/></div>';
            break;
        case 'idea_post_relate' :
            $node = menu_get_object('node');
            $block['content'] = idea_custom_post_relate($node);
            break;

        case 'idea_post_front_top' :
            $cate = null;
            if(arg(0)=='taxonomy' && arg(1)=='term' && arg(2) != null){
                $cate = arg(2);
            }
            $block['content'] = idea_custom_front_top($cate);
            break;
        case 'idea_category_block' :
            $cate = null;
            if(arg(0)=='taxonomy' && arg(1)=='term' && arg(2) != null){
                $cate = arg(2);
            }
            $block['content'] = idea_custom_front_top($cate);
            break;
        case 'idea_category_block_item' :
            $cate = null;
            if(arg(0)=='taxonomy' && arg(1)=='term' && arg(2) != null){
                $cate = arg(2);
            }
            $block['content'] = idea_custom_frontpage_cate($cate);
            break;
        case 'idea_custom_button' :
            $class='cboxElement post_bottom_login';
            $href = '/idea/login';

            if($user->uid > 0){
                $class='';
                $href = '/node/add/idea';
            }
            $block['content'] = '<a class="post_bottom '.$class.'" href="'.$href.'"></a>';
            break;
        case 'idea_register_user' :
            $register = false;
            if ($user->uid <= 0) {
                $refister = drupal_render(drupal_get_form('user_register_form'));
            }
            $block['content'] = $refister;
            break;
    }

    return $block;
}

/**
 * Idea post relate
 */

function idea_custom_post_relate($node, $ids = 2)
{
    //add js and css
    drupal_add_js(drupal_get_path('module', 'idea_custom') . '/js/amazingcarousel.js');
    drupal_add_js(drupal_get_path('module', 'idea_custom') . '/js/initcarousel.js');
    drupal_add_css(drupal_get_path('module', 'idea_custom') . '/css/initcarousel.css');
    
    $data = array();
    $query = db_select('node', 'n');
    $query->fields('n');
    $query->join('field_data_field_category','fc','fc.entity_id = n.nid');
    $query->condition('n.type', 'idea');
    $query->condition('n.status', NODE_PUBLISHED);
    $query->condition('fc.field_category_tid', $node->field_category[LANGUAGE_NONE][0]['tid'],'=');
    $query->condition('n.nid', $node->nid, '<>');
    $query->condition('n.created', $node->created, '<');
    $query->orderBy('n.created', 'DESC');
    $result = $query->execute()->fetchAll();
    if ($result) {
        foreach ($result as $n) {
            $node = node_load($n->nid);
            $data[] = $node;
        }
    }
    return theme('idea_post_relate', array('nodes' => $data,'ids'=> $ids));
}


/**
 * function tracking log
 */

function idea_custom_logs($nid, $type)
{
    global $user;
    $uid = $user->uid;
    $message = _idea_log_type($type, $uid, $nid);
    db_insert('idea_logs')// Table name no longer needs {}
    ->fields(array(
        'uid' => $uid,
        'nid' => $nid,
        'type' => $type,
        'ip' => ip_address(),
        'message' => $message,
        'created' => REQUEST_TIME
    ))
        ->execute();
}

/**
 * Log type with message
 */
function _idea_log_type($type, $uid, $nid)
{
    $message = null;
    switch ($type) {
        case 'like':
            $message = 'User ' . $uid . ' like post .' . $nid;
            break;
        case 'view':
            $message = 'User ' . $uid . ' view post .' . $nid;
            break;
        case 'comment':
            $message = 'User ' . $uid . ' comment post .' . $nid;
            break;
        case 'share':
            $message = 'User ' . $uid . ' share post .' . $nid;
            break;
        case 'save':
            $message = 'User ' . $uid . ' save post .' . $nid;
            break;
    }
    return $message;
}

/**
 * function like post
 */
function idea_custom_like_post($nid)
{
    global $user;
    $node = node_load($nid);
    if ($node && $node->status == NODE_PUBLISHED && $user->status == NODE_PUBLISHED) {
        if (idea_custom_check_liked($nid)) {
            db_insert('idea_likes')// Table name no longer needs {}
            ->fields(array(
                'uid' => $user->uid,
                'nid' => $nid,
                'count' => 1,
                'ip' => ip_address(),
                'created' => REQUEST_TIME
            ))
                ->execute();
            $node->field_like[LANGUAGE_NONE][0]['value'] = ($node->field_like[LANGUAGE_NONE][0]['value'] + 1);
            node_save($node);
            //track log
            idea_custom_logs($nid, 'like');
            //update score for user
        
        $author = node_load($node->uid);
        if($node->field_like[LANGUAGE_NONE][0]['value']/ variable_get('every_limit_like',100) == 1||
                $node->field_like[LANGUAGE_NONE][0]['value']/ variable_get('every_limit_like',100) == 3||
                $node->field_like[LANGUAGE_NONE][0]['value']/ variable_get('every_limit_like',100) == 4||
                $node->field_like[LANGUAGE_NONE][0]['value']/ variable_get('every_limit_like',100) == 5||
                $node->field_like[LANGUAGE_NONE][0]['value']/ variable_get('every_limit_like',100) == 6||
                $node->field_like[LANGUAGE_NONE][0]['value']/ variable_get('every_limit_like',100) == 7||
                $node->field_like[LANGUAGE_NONE][0]['value']/ variable_get('every_limit_like',100) == 8||
                $node->field_like[LANGUAGE_NONE][0]['value']/ variable_get('every_limit_like',100) == 9||
                $node->field_like[LANGUAGE_NONE][0]['value']/ variable_get('every_limit_like',100) == 10){
            $author->field_score[LANGUAGE_NONE][0]['value'] = $author->field_score[LANGUAGE_NONE][0]['value'] + variable_get('idea_view',50);
            user_save($author);
        }
            print _get_liked_post($nid);
        } else {
            print $node->field_like[LANGUAGE_NONE][0]['value'];
        }
        

    } else {
        print 'Access denied';

    }
    drupal_exit();
}

/**
 * function view post
 */
function idea_custom_view_post($nid)
{
    global $user;
    $node = node_load($nid);
    if ($node->type=='idea') {
      //$current = node_load($nid);
        db_insert('idea_views')// Table name no longer needs {}
        ->fields(array(
            'uid' => $user->uid,
            'nid' => $nid,
            'count' => 1,
            'ip' => ip_address(),
            'created' => REQUEST_TIME
        ))
            ->execute();
        $node->field_views[LANGUAGE_NONE][0]['value'] = ($node->field_views[LANGUAGE_NONE][0]['value'] + 1);
        //$node->field['field_myfield'][LANGUAGE_NONE][0]['value'] = 1;
        field_attach_update('node', $node);
        //track log
        idea_custom_logs($nid, 'view');
        return $node->field_views[LANGUAGE_NONE][0]['value'];

    }
   // return $node->field_views[LANGUAGE_NONE][0]['value'];
}

//update views data

/**
 * function share post
 */
function idea_custom_share_post($nid)
{
    global $user;
    $node = node_load($nid);
    if ($node && $node->status == NODE_PUBLISHED && $user->status == NODE_PUBLISHED) {
        db_insert('idea_share')// Table name no longer needs {}
        ->fields(array(
            'uid' => $user->uid,
            'nid' => $nid,
            'count' => 1,
            'ip' => ip_address(),
            'created' => REQUEST_TIME
        ))
            ->execute();
        $node->field_share[LANGUAGE_NONE][0]['value'] = ($node->field_share[LANGUAGE_NONE][0]['value'] + 1);
        node_save($node);
        //track log
        idea_custom_logs($nid, 'share');

        print $node->field_share[LANGUAGE_NONE][0]['value'];

    } else {
        print $node->field_share[LANGUAGE_NONE][0]['value'];

    }
    drupal_exit();
}

/**
 * function save post
 */
function idea_custom_save_post($nid)
{
    global $user;
    $node = node_load($nid);
    if ($node && $node->status == NODE_PUBLISHED && $user->status == NODE_PUBLISHED && $node->type=='idea') {
        if (idea_custom_check_save($nid)) {
            db_insert('idea_save')// Table name no longer needs {}
            ->fields(array(
                'uid' => $user->uid,
                'nid' => $nid,
                'count' => 1,
                'ip' => ip_address(),
                'created' => REQUEST_TIME
            ))
                ->execute();
            $node->field_save[LANGUAGE_NONE][0]['value'] = ($node->field_save[LANGUAGE_NONE][0]['value'] + 1);
            node_save($node);
            //track log
            idea_custom_logs($nid, 'save');

            print $node->field_save[LANGUAGE_NONE][0]['value'];
        } else {
            print $node->field_save[LANGUAGE_NONE][0]['value'];
        }

    } else {
        print 'Access denied';

    }
    drupal_exit();
}

/**
 * check user liked
 */
function idea_custom_check_liked($nid)
{
    global $user;
    $query = db_select('idea_likes', 'il');
    $query->fields('il');
    $query->condition('uid', $user->uid);
    $query->condition('nid', $nid);
    $result = $query->execute()->fetchAll();
    if ($result) {
        return false;
    } else {
        return true;
    }
}

/**
 * check user liked
 */
function idea_custom_check_save($nid)
{
    global $user;
    $query = db_select('idea_save', 'il');
    $query->fields('il');
    $query->condition('uid', $user->uid);
    $query->condition('nid', $nid);
    $result = $query->execute()->fetchAll();
    if ($result) {
        return false;
    } else {
        return true;
    }
}

/**
 * Get article Top
 */
function idea_custom_front_top($cate = null)
{
    global $user;
    if($cate != null){
        $query = db_select('node','n');
        $query->fields('n');
        $query->join('taxonomy_index','ti','ti.nid = n.nid');
        if ($user->uid > 0) {
            if (in_array('admin', $user->roles) || in_array('administrator', $user->roles)) {
                $query->condition(db_or()
                    ->condition('n.status', 1)
                    ->condition('n.status', 0)
                );
            } else {
                $query->condition(db_or()
                    ->condition('n.uid', $user->uid)
                    ->condition('n.status', 1)
                );
            }
        } else {
            $query->condition('n.status', NODE_PUBLISHED);
        }
        $query->condition('ti.tid', $cate);
        $query->condition('n.type', 'idea');
        $query->orderBy('n.created', 'DESC');
    }else{
        $query = db_select('node', 'n');
        $query->fields('n');

        if ($user->uid > 0) {
            if (in_array('admin', $user->roles) || in_array('administrator', $user->roles)) {
                $query->condition(db_or()
                    ->condition('status', 1)
                    ->condition('status', 0)
                );
            } else {
                $query->condition(db_or()
                    ->condition('uid', $user->uid)
                    ->condition('status', 1)
                );
            }
        } else {
            $query->condition('status', NODE_PUBLISHED);
        }
        $query->condition('type', 'idea');
        $query->orderBy('created', 'DESC');
    }

    $query->range(0, 1);
    $result = $query->execute()->fetchObject();

    if ($result) {
        $node = node_load($result->nid);
        idea_custom_view_post($result->nid);
        return theme('idea_frontpage_top', array('node' => $node));
    } else {
        return false;
    }

}

/**
 * Filter bad word
 */
function filter_bad_word($text)
{
    if (variable_get('filter_word')) {
        $filters = variable_get('filter_word');
        $filters = explode(',', $filters);
        foreach ($filters as $filter) {
            $content = '';
            $content .= trim($filter);
            $content .= ' ';
            $text = str_replace($content, ' *** ', $text);
        }
    }
    return $text;
}

/**
 * Get comment by node
 */
function idea_custom_get_comment($nid)
{

    $node = node_load($nid);
    $query = db_select('comment', 'c');
    $query->fields('c');
    $query->condition('nid', $nid);
    $query->condition('status', 1);
    $query->orderBy('created', 'ASC');
    $result = $query->execute()->fetchAllAssoc('cid');
    $data = array();
    if ($result) {
        foreach ($result as $key => $c) {
            $data[$key] = comment_load($key);
        }
        return theme('idea_comment', array('comments' => $data));
    } else {
        return false;
    }
}

/**
 * Get comment by node
 */
function idea_custom_get_comment_more($nid, $page = null)
{

    $node = node_load($nid);
    $query = db_select('comment', 'c');
    $query->fields('c');
    $query->condition('nid', $nid);
    $query->condition('status', 1);
    $query->orderBy('created', 'DESC');
    $query->range(0, 5);
    $result = $query->execute()->fetchAllAssoc('cid');
    $data = array();
    if ($result) {
        foreach ($result as $key => $c) {
            $data[$key] = comment_load($key);
        }
        ksort($data);
        return theme('idea_comment', array('comments' => $data));
    } else {
        return false;
    }
}

/**
 * idea comment form
 */
function idea_comment_form($nid, $page = null)
{
    return theme('idea_comment_form', array('nid' => $nid, 'page' => $page));
}

/**
 * Get comment by node
 */
function idea_custom_get_comment_check($nid)
{

    $node = node_load($nid);
    $query = db_select('comment', 'c');
    $query->fields('c');
    $query->condition('nid', $nid);
    $query->condition('status', 1);
    $query->orderBy('created', 'ASC');
    $result = $query->execute()->fetchAllAssoc('cid');
    $data = array();
    if ($result) {
        foreach ($result as $key => $c) {
            $data[$key] = comment_load($key);
        }
        return $data;
    } else {
        return false;
    }
}

/**
 * Get liked of node
 */
function _get_liked_post($nid)
{
    $node = node_load($nid);
    return $node->field_like[LANGUAGE_NONE][0]['value'];
}

/**
 * get comment count
 */
function _get_comment_count($nid)
{
    $query = db_select('comment', 'c');
    $query->fields('c');
    $query->condition('nid', $nid);
    $query->condition('status', 1);
    $result = $query->execute()->fetchAll();
    if ($result) {
        return count($result);
    } else {
        return 0;
    }
}

/**
 * implement hook node_view
 */
function idea_custom_node_view($node)
{
    //if ($node->type = 'idea') {
      idea_custom_view_post($node->nid);
   // }
}

/**
 * My post number
 */
function _idea_get_post_count($uid=false)
{
    global $user;
    if(!$uid){
        $uid = $user->uid;
    }
    $query = db_select('node', 'n');
    $query->fields('n');
    $query->condition('type', 'idea');
  //  $query->condition('status', 1);
    $query->condition('uid', $uid);
    $result = $query->execute()->fetchAll();
    if ($result) {
        return count($result);
    } else {
        return 0;
    }
}

/**
 * My post number
 */
function _idea_get_favor_count()
{
    global $user;
    $query = db_select('idea_save', 'n');
    $query->fields('n');
    $query->condition('uid', $user->uid);
    $result = $query->execute()->fetchAll();
    $count = 0;

    if ($result) {
        foreach ($result as $r) {
            $count+= $r->count;
        }
    }
    return $count;
}

/**
 * Implement hook_form_alter
 */
function idea_custom_form_alter(&$form, &$form_state, $form_id)
{
    if ($form_id == 'user_login_block') {
        // print_r($form);
        $form['actions']['register'] = array(
            '#markup' => '<div class="register-action"><a href="#">Đăng ký</a></div>'
        );
    }
    if ($form_id == 'user_register_form') {
        //print_r($form['actions']);
        $form['actions']['submit']['#value'] = t('Đăng ký');
        $form['actions']['register'] = array(
            '#markup' => '<div class="login-action"><a href="#">Đăng nhập</a></div>'
        );
    }
}

/**
 * hook_user_insert
 */
function idea_custom_user_presave(&$edit, $account, $category)
{
    $select = db_select('user_profile_tmp', 'tt');
    $select->fields('tt');
    $select->condition('email', $account->mail);
    $result = $select->execute()->fetchObject();
    if ($result && empty($account->field_full_name[LANGUAGE_NONE][0]['value'])) {
        $edit['field_full_name'][LANGUAGE_NONE][0]['value'] = $result->name;
    }
    //update score
    if($account->field_score[LANGUAGE_NONE][0]['value'] <=0){
     $edit['field_score'][LANGUAGE_NONE][0]['value'] = variable_get('idea_register',200);   
    }
    
    if(isset($_GET['token']) && !empty($_GET['token'])){
        $code = base64_decode($_GET['token']);
        $code = explode('|',$code);
        $uid = $code[1];
        //update point for user
        $user = user_load($uid);
        $user->field_score[LANGUAGE_NONE][0]['value'] = $user->field_score[LANGUAGE_NONE][0]['value'] + variable_get('idea_invite_friend',100);
        user_save($user);
    }


}

/**
 * implement query node
 */
function idea_get_article_cate($start = 0, $end = 5, $tid = null) {
    global $user;
        if($tid==null){
            if(arg(0)=='taxonomy' && arg(1)=='term'){
            $tid = arg(2);
        } 
    }
   
    $data = array();
    $query = db_select('node', 'n');
    $query->fields('n');
    $query->join('taxonomy_index','ti','ti.nid = n.nid');

    if ($user->uid > 0) {
        if (in_array('admin', $user->roles) || in_array('administrator', $user->roles)) {
            $query->condition(db_or()
                ->condition('n.status', 1)
                ->condition('n.status', 0)
            );
        } else {
            $query->condition(db_or()
                ->condition('n.uid', $user->uid)
                ->condition('n.status', 1)
            );
        }
    } else {
        $query->condition('n.status', NODE_PUBLISHED);
    }
    $query->condition('n.type', 'idea');
    $query->condition('ti.tid', $tid);
    $query->orderBy('n.created', 'DESC');
    if ($start == 0) {
        $start = 1;
    } else {
        $start = $start + 1;
    }
    $query->range($start, $end);
    $result = $query->execute()->fetchAll();
    //var_dump($result);
    if ($result) {
        foreach ($result as $n) {
            $node = node_load($n->nid);
            $data[] = $node;
        }
    }
    return $data;
}

/**
 * Implement get more article
 */
function idea_custom_article_cate_more($pagesize = 5) {
    $pager = 0;
    $tid = null;
    if (isset($_POST['pager'])) {
        $pager = $_POST['pager'] * $pagesize;
    }
    if (isset($_POST['tid'])) {
        $tid = $_POST['tid'];
    }
    $nodes = idea_get_article_cate($pager, $pagesize, $tid);
    if ($nodes) {
        print (render(theme('idea_frontpage_pager', array('nodes' => $nodes))));
        drupal_exit();
    } else {
        print 'ko';
        drupal_exit();
    }
}

function idea_custom_frontpage_cate($tid) {
    $nodes = idea_get_article_cate($start = 0, $end = 5, $tid);
    return theme('idea_frontpage', array('nodes' => $nodes));
}

/**
 * Bai viet duoc xem nhieu nhat trong thang
 */
function _view_most_month(){
    $current_date = time();

    $month_date = '';
}

/**
 * @param $view
 * @param $query
 * Implement hook_views_query_alter
 */
function idea_custom_views_query_alter(&$view, &$query) {
    if($view->name === 'article_popular') {

        if(isset($_GET['sort_by']) && $_GET['sort_by']=='php'){
            $current_date = time();
            $last_month = $current_date - (30*84600);
            $query->where[1]['conditions'][2] = array('field'=>"node.created BETWEEN ".$last_month." AND ".$current_date,"value"=>array(),"operator"=>"formula");
            $view->query->orderby[0]['field'] = "field_data_field_like_field_like_value";
            $view->query->orderby[0]['direction'] = "DESC";
        }

        if(isset($_GET['sort_by']) && $_GET['sort_by']=='php_1'){
            $current_date = time();
            $last_month = $current_date - (30*84600);
            $query->where[1]['conditions'][2] = array('field'=>"node.created BETWEEN ".$last_month." AND ".$current_date,"value"=>array(),"operator"=>"formula");
            $view->query->orderby[0]['field'] = "field_data_field_views_field_views_value";
            $view->query->orderby[0]['direction'] = "DESC";
        }


    }
}
/**
 * user block info
 */
function _user_block_info(){
    global $user;
    $profile = false;
    if ($user->uid > 0) {
        $account = user_load($user->uid);
        if ($account->status > 0) {
            $profile = theme('idea_account_info', array('account' => $account));
        }
    }else{
        $form = drupal_get_form('user_login_block');
        $profile = drupal_render($form);        
    }
    return $profile;
}

/**
 * search mobile
 */
function _search_mobile(){
    return theme('idea_search');
}
/**
 * Implement hook_node_update
 */
function idea_custom_node_update($node){
    if($node->type=='idea'){
       if($node->original->status==0 && $node->status==1 && $node->type=='idea'){
           $user = user_load($node->uid);
           $user->field_score[LANGUAGE_NONE][0]['value'] =  $user->field_score[LANGUAGE_NONE][0]['value'] + variable_get('idea_post',20);
           user_save($user);
       }
    }
}


/**
 * 
 */